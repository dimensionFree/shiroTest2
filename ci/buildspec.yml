version: 0.2

env:
  variables:
    CI_DATABASE_URL: "jdbc:mysql://localhost:3306"
    CI_DATABASE_USER: "root"
    CI_DATABASE_PASSWORD: "rootpassword"
  parameter-store:
    DEV_DB_URL: "/myapp/datebase_url"
    DEV_DB_USER: "/myapp/datebase_username"
    DEV_DB_PASSWORD: "/myapp/datebase_pwd"
    DEV_MAIL_PASSWORD: "/myapp/email_pwd"
    DEV_MAIL_USERNAME: "/myapp/email_username"

phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo Pulling Redis Docker image...
      - docker pull redis:latest  # 拉取 Redis 镜像
      - echo Starting Redis container...
      - docker run -d --name redis -p 6379:6379 redis:latest  # 启动 Redis 容器
      - echo Pulling MySQL 8 Docker image...
      - docker pull mysql:8.0  # 指定 MySQL 8.0 版本
#      - echo Starting MySQL container...
#      - docker run -d --name mysql-test -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=shiroTest -p 3306:3306 mysql:8.0
#      - sleep 20  # 等待 MySQL 完全启动
      - echo Starting MySQL container
        - docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=testdb -p 3306:3306 -d mysql:latest
        - docker ps
        - echo Waiting for MySQL to start...
        - |
        until docker exec mysql-container mysqladmin ping --host 127.0.0.1 --port 3306 --user=root --password=root --silent &> /dev/null; do
        echo -n "."; sleep 1;
        done
        - echo MySQL is up and running
#      - echo Installing MySQL 8...
#      - sudo yum update -y
#      - sudo yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
#      - sudo yum install -y mysql-community-server
#      - echo Starting MySQL service...
#      - sudo service mysqld start
#      - echo Waiting for MySQL to fully start...
#      - sleep 20  # 等待 MySQL 服务完全启动
#      - sudo grep 'temporary password' /var/log/mysqld.log  # 获取临时 root 密码
#      # 设置 MySQL root 用户密码
#      - sudo mysqladmin -u root password 'rootpassword'
#      - echo Creating database shiroTest...
#      - mysql -u root -p rootpassword -e "CREATE DATABASE shiroTest;"


  pre_build:
    commands:
      - docker exec mysql-test mysql --version
      - echo Doing mvn test...
      # 显示从 Parameter Store 获取的变量
      - echo DEV_DB_URL is $DEV_DB_URL
      - echo DEV_DB_USER is $DEV_DB_USER
      - echo DEV_DB_PASSWORD is $DEV_DB_PASSWORD
      - echo DEV_MAIL_PASSWORD is $DEV_MAIL_PASSWORD
      - echo DEV_MAIL_USERNAME is $DEV_MAIL_USERNAME
      # 显示从 设置的变量
      - echo CI_DB_URL is $CI_DATABASE_URL
      - echo CI_DB_USER is $CI_DATABASE_USER
      - echo CI_DB_PASSWORD is $CI_DATABASE_PASSWORD
      # 在测试前设置环境变量
      - export DB_URL=$CI_DATABASE_URL
      - export DB_USERNAME=$CI_DATABASE_USER
      - export DB_PASSWORD=$CI_DATABASE_PASSWORD
      - export MAIL_PASSWORD=$DEV_MAIL_PASSWORD
      - export MAIL_USERNAME=$DEV_MAIL_USERNAME
      - echo $DB_URL
      - echo $DB_USERNAME
      - echo $DB_PASSWORD
      - echo $MAIL_PASSWORD
      - echo $MAIL_USERNAME
      - mvn test
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - mvn package
      - docker build -t backend .
      - docker tag backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s.dkr.ecr.%s.amazonaws.com/backend:latest"}' $AWS_ACCOUNT_ID $AWS_DEFAULT_REGION > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - taskdef.json
    - appspec.yaml
