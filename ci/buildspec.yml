version: 0.2

env:
  variables:
    CI_DATABASE_URL: "jdbc:mysql://localhost:3306"
    CI_DATABASE_USER: "root"
    CI_DATABASE_PASSWORD: "rootpassword"
  parameter-store:
    DEV_DB_URL: "/myapp/datebase_url"
    DEV_DB_USER: "/myapp/datebase_username"
    DEV_DB_PASSWORD: "/myapp/datebase_pwd"
    DEV_MAIL_PASSWORD: "/myapp/email_pwd"
    DEV_MAIL_USERNAME: "/myapp/email_username"

phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Pulling Redis Docker image from ECR...
      - docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:redis-6.0
      - echo Starting Redis container...
#      - docker run -d --name redis -p 6379:6379 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:redis-6.0
      - docker run -d --name redis --network host $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:redis-6.0
      - echo Pulling MySQL Docker image from ECR...
      - docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:mysql-8.0
      - echo Starting MySQL container...
#      - docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=shiroTest -p 3306:3306 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:mysql-8.0
      - docker run -d --name mysql-container --network host -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=shiroTest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/my_image_store:mysql-8.0

      - echo Waiting for MySQL to start
      - |
        until docker exec mysql-container mysqladmin ping --host localhost --port 3306 --user=root --password=rootpassword --silent &> /dev/null ; do
          echo -n "." ; sleep 1 ;
        done
      - echo MySQL is up and running
      - docker logs mysql-container
      - sudo yum install net-tools -y
      - netstat -tuln
      - docker ps
      - docker port mysql-container
      - docker port mysql-container
      - docker inspect redis | grep -i "networkmode"
      - docker inspect mysql-container | grep -i "networkmode"
#      - sudo yum install -y nc
#      - nc -zv localhost 6379
#      - nc -zv localhost 3306

  pre_build:
    commands:
      - echo Doing mvn test...
      # 显示从 Parameter Store 获取的变量
      - echo DEV_DB_URL is $DEV_DB_URL
      - echo DEV_DB_USER is $DEV_DB_USER
      - echo DEV_DB_PASSWORD is $DEV_DB_PASSWORD
      - echo DEV_MAIL_PASSWORD is $DEV_MAIL_PASSWORD
      - echo DEV_MAIL_USERNAME is $DEV_MAIL_USERNAME
      # 显示从 设置的变量
      - echo CI_DB_URL is $CI_DATABASE_URL
      - echo CI_DB_USER is $CI_DATABASE_USER
      - echo CI_DB_PASSWORD is $CI_DATABASE_PASSWORD
      # 在测试前设置环境变量
      - export DB_URL="$CI_DATABASE_URL"
      - export DB_USERNAME="$CI_DATABASE_USER"
      - export DB_PASSWORD="$CI_DATABASE_PASSWORD"
      - export MAIL_PASSWORD="$DEV_MAIL_PASSWORD"
      - export MAIL_USERNAME="$DEV_MAIL_USERNAME"
      - echo "Checking environment variables..."
      - if [ "$DB_URL" == "jdbc:mysql://localhost:3306" ]; then echo "DB_URL is correct"; else echo "DB_URL is incorrect"; fi
      - if [ "$DB_USERNAME" == "root" ]; then echo "DB_USERNAME is correct"; else echo "DB_USERNAME is incorrect"; fi
      - if [ "$DB_PASSWORD" == "rootpassword" ]; then echo "DB_PASSWORD is correct"; else echo "DB_PASSWORD is incorrect"; fi
      - if [ "$MAIL_PASSWORD" == "ynryetfaibweiaub" ]; then echo "MAIL_PASSWORD is correct"; else echo "MAIL_PASSWORD is incorrect"; fi
      - if [ "$MAIL_USERNAME" == "mailsenderblogweb@gmail.com" ]; then echo "MAIL_USERNAME is correct"; else echo "MAIL_USERNAME is incorrect"; fi
      - ls
      - mvn test
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - mvn package
      - docker build -t backend .
      - docker tag backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s.dkr.ecr.%s.amazonaws.com/backend:latest"}' $AWS_ACCOUNT_ID $AWS_DEFAULT_REGION > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - taskdef.json
    - appspec.yaml
