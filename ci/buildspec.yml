version: 0.2

env:
  variables:
    CI_DATABASE_URL: "jdbc:mysql://localhost:3306"
    CI_DATABASE_USER: "root"
    CI_DATABASE_PASSWORD: "rootpassword"
  parameter-store:
    DEV_DB_URL: "/myapp/datebase_url"
    DEV_DB_USER: "/myapp/datebase_username"
    DEV_DB_PASSWORD: "/myapp/datebase_pwd"
    DEV_MAIL_PASSWORD: "/myapp/email_pwd"
    DEV_MAIL_USERNAME: "/myapp/email_username"

phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo Pulling Redis Docker image...
      - docker pull redis:latest  # 拉取 Redis 镜像
      - echo Starting Redis container...
      - docker run -d --name redis -p 6379:6379 redis:latest  # 启动 Redis 容器
      - echo Pulling MySQL 8 Docker image...
      - docker pull mysql:8.0
      - echo Creating Docker network...
      - echo Starting MySQL container...
      - docker run --name mysqlDb -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=shiroTest -p 3306:3306 -d mysql:8.0
      - echo "Waiting for MySQL to start..."
      - for i in {1..10}; do if docker exec mysqlDb mysqladmin ping -u root -p rootpassword &> /dev/null; then echo "MySQL is up!"; break; else echo "Waiting..."; sleep 6; fi; done


  pre_build:
    commands:
      - echo Doing mvn test...
      # 显示从 Parameter Store 获取的变量
      - echo DEV_DB_URL is $DEV_DB_URL
      - echo DEV_DB_USER is $DEV_DB_USER
      - echo DEV_DB_PASSWORD is $DEV_DB_PASSWORD
      - echo DEV_MAIL_PASSWORD is $DEV_MAIL_PASSWORD
      - echo DEV_MAIL_USERNAME is $DEV_MAIL_USERNAME
      # 显示从 设置的变量
      - echo CI_DB_URL is $CI_DATABASE_URL
      - echo CI_DB_USER is $CI_DATABASE_USER
      - echo CI_DB_PASSWORD is $CI_DATABASE_PASSWORD
      # 在测试前设置环境变量
      - export DB_URL=$CI_DATABASE_URL
      - export DB_USERNAME=$CI_DATABASE_USER
      - export DB_PASSWORD=$CI_DATABASE_PASSWORD
      - export MAIL_PASSWORD=$DEV_MAIL_PASSWORD
      - export MAIL_USERNAME=$DEV_MAIL_USERNAME
      - echo "Checking environment variables..."
      - if [ "$DB_URL" == "jdbc:mysql://localhost:3306/" ]; then echo "DB_URL is correct"; else echo "DB_URL is incorrect"; fi
      - if [ "$DB_USERNAME" == "root1" ]; then echo "DB_USERNAME is correct"; else echo "DB_USERNAME is incorrect"; fi
      - if [ "$DB_PASSWORD" == "rootpassword1" ]; then echo "DB_PASSWORD is correct"; else echo "DB_PASSWORD is incorrect"; fi
      - if [ "$MAIL_PASSWORD" == "ynryetfaibweiaub1" ]; then echo "MAIL_PASSWORD is correct"; else echo "MAIL_PASSWORD is incorrect"; fi
      - if [ "$MAIL_USERNAME" == "mailsenderblogweb@gmail.com1" ]; then echo "MAIL_USERNAME is correct"; else echo "MAIL_USERNAME is incorrect"; fi
      - mvn test -D env.DB_URL=$DB_URL -D env.DB_USERNAME=$DB_USERNAME -D env.DB_PASSWORD=$DB_PASSWORD
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - mvn package
      - docker build -t backend .
      - docker tag backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
  post_build:
    commands:
      - echo Build completed on `date`
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/backend:latest
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s.dkr.ecr.%s.amazonaws.com/backend:latest"}' $AWS_ACCOUNT_ID $AWS_DEFAULT_REGION > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - taskdef.json
    - appspec.yaml
